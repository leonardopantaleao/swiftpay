//
//  iOSSwiftPayTests-iOSSwiftPayMocks.generated.swift
//  iOSSwiftPay
//
//  Generated by Mockingbird v0.16.0.
//  DO NOT EDIT
//

@testable import Mockingbird
@testable import iOSSwiftPay
import Firebase
import Foundation
import Swift
import UIKit

private var genericTypesStaticMocks = Mockingbird.Synchronized<[String: Mockingbird.StaticMock]>([:])

// MARK: - Mocked AppDelegate

public final class AppDelegateMock: Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }
}

@available(*, unavailable, message: "'AppDelegate' does not declare any accessible designated initializers and cannot be mocked")
public func mock(_ type: iOSSwiftPay.AppDelegate.Type, file: StaticString = #file, line: UInt = #line) -> AppDelegateMock {
  fatalError()
}

// MARK: - Mocked ClientProtocol

public final class ClientProtocolMock: iOSSwiftPay.ClientProtocol, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? {
    get { return self.stubbingContext.sourceLocation }
    set {
      self.stubbingContext.sourceLocation = newValue
      ClientProtocolMock.staticMock.stubbingContext.sourceLocation = newValue
    }
  }

  // MARK: Mocked responseHandler

  public var `responseHandler`: iOSSwiftPay.ResponseHandler {
    get {
      let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "responseHandler.get", arguments: [], returnType: Swift.ObjectIdentifier((iOSSwiftPay.ResponseHandler).self))
      return self.mockingContext.didInvoke(invocation) { () -> iOSSwiftPay.ResponseHandler in
        let implementation = self.stubbingContext.implementation(for: invocation)
        if let concreteImplementation = implementation as? () -> iOSSwiftPay.ResponseHandler {
          return concreteImplementation()
        } else if let defaultValue = self.stubbingContext.defaultValueProvider.provideValue(for: (iOSSwiftPay.ResponseHandler).self) {
          return defaultValue
        } else {
          fatalError(self.stubbingContext.failTest(for: invocation))
        }
      }
    }
    set {
      let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "responseHandler.set", arguments: [ArgumentMatcher(newValue)], returnType: Swift.ObjectIdentifier(Void.self))
      self.mockingContext.didInvoke(invocation)
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (iOSSwiftPay.ResponseHandler) -> Void {
        concreteImplementation(newValue)
      } else {
        (implementation as? () -> Void)?()
      }
    }
  }

  public func getResponseHandler() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.ResponseHandler, iOSSwiftPay.ResponseHandler> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "responseHandler.get", arguments: [], returnType: Swift.ObjectIdentifier((iOSSwiftPay.ResponseHandler).self))
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.ResponseHandler, iOSSwiftPay.ResponseHandler>(mock: self, invocation: invocation)
  }

  public func setResponseHandler(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.ResponseHandler) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.ResponseHandler) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(newValue)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "responseHandler.set", arguments: arguments, returnType: Swift.ObjectIdentifier(Void.self))
    return Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.ResponseHandler) -> Void, Void>(mock: self, invocation: invocation)
  }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `signIn`(_ `email`: String?, _ `password`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ())

  public func `signIn`(_ `email`: String?, _ `password`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`signIn`(_ `email`: String?, _ `password`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void", arguments: [Mockingbird.ArgumentMatcher(`email`), Mockingbird.ArgumentMatcher(`password`), Mockingbird.ArgumentMatcher(`completionHandler`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String?, String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void {
        concreteImplementation(`email`, `password`, `completionHandler`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `signIn`(_ `email`: @escaping @autoclosure () -> String?, _ `password`: @escaping @autoclosure () -> String?, `completionHandler`: @escaping @autoclosure () -> (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`email`), Mockingbird.resolve(`password`), Mockingbird.resolve(`completionHandler`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`signIn`(_ `email`: String?, _ `password`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void, Void>(mock: self, invocation: invocation)
  }
}

/// Returns a concrete mock of `ClientProtocol`.
public func mock(_ type: iOSSwiftPay.ClientProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> ClientProtocolMock {
  return ClientProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked DepositViewController

public final class DepositViewControllerMock: iOSSwiftPay.DepositViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> DepositViewControllerMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?, __file: StaticString = #file, __line: UInt = #line) -> DepositViewControllerMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?)

  public required override init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `moneyDepositBtnTapped`(`sender`: UIButton!)

  public override func `moneyDepositBtnTapped`(`sender`: UIButton!) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `moneyDepositBtnTapped`(`sender`: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(DepositViewController.self).initialize(â€¦)`.
public func mock(_ type: iOSSwiftPay.DepositViewController.Type, file: StaticString = #file, line: UInt = #line) -> DepositViewControllerMock.InitializerProxy.Type {
  return DepositViewControllerMock.InitializerProxy.self
}

// MARK: - Mocked HomeViewController

public final class HomeViewControllerMock: Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }
}

@available(*, unavailable, message: "'HomeViewController' does not declare any accessible designated initializers and cannot be mocked")
public func mock(_ type: iOSSwiftPay.HomeViewController.Type, file: StaticString = #file, line: UInt = #line) -> HomeViewControllerMock {
  fatalError()
}

// MARK: - Mocked MoneyTransactionMock

public final class MoneyTransactionMockMock: iOSSwiftPay.MoneyTransactionMock, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`senderId`: String, `receiverId`: String, `amount`: Double, `transactionDate`: TimeInterval, `type`: String, __file: StaticString = #file, __line: UInt = #line) -> MoneyTransactionMockMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked amount

  override public var `amount`: Double { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getAmount() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Double, Double> { fatalError("See 'Thunk Pruning' in the README") }

  public func setAmount(_ newValue: @escaping @autoclosure () -> Double) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Double) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked receiverId

  override public var `receiverId`: String { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getReceiverId() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> String, String> { fatalError("See 'Thunk Pruning' in the README") }

  public func setReceiverId(_ newValue: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (String) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked senderId

  override public var `senderId`: String { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getSenderId() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> String, String> { fatalError("See 'Thunk Pruning' in the README") }

  public func setSenderId(_ newValue: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (String) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked transactionDate

  override public var `transactionDate`: TimeInterval { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getTransactionDate() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> TimeInterval, TimeInterval> { fatalError("See 'Thunk Pruning' in the README") }

  public func setTransactionDate(_ newValue: @escaping @autoclosure () -> TimeInterval) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (TimeInterval) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked type

  override public var `type`: String { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getType() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> String, String> { fatalError("See 'Thunk Pruning' in the README") }

  public func setType(_ newValue: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (String) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`senderId`: String, `receiverId`: String, `amount`: Double, `transactionDate`: TimeInterval, `type`: String)

  public required override init(`senderId`: String, `receiverId`: String, `amount`: Double, `transactionDate`: TimeInterval, `type`: String) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(MoneyTransactionMock.self).initialize(â€¦)`.
public func mock(_ type: iOSSwiftPay.MoneyTransactionMock.Type, file: StaticString = #file, line: UInt = #line) -> MoneyTransactionMockMock.InitializerProxy.Type {
  return MoneyTransactionMockMock.InitializerProxy.self
}

// MARK: - Mocked MoneyTransactionTableViewCell

public final class MoneyTransactionTableViewCellMock: iOSSwiftPay.MoneyTransactionTableViewCell, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder` `aDecoder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> MoneyTransactionTableViewCellMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`style`: UITableViewCell.CellStyle, `reuseIdentifier`: String?, __file: StaticString = #file, __line: UInt = #line) -> MoneyTransactionTableViewCellMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked init?(`coder` `aDecoder`: NSCoder)

  public required init?(`coder` `aDecoder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`style`: UITableViewCell.CellStyle, `reuseIdentifier`: String?)

  public required override init(`style`: UITableViewCell.CellStyle, `reuseIdentifier`: String?) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(MoneyTransactionTableViewCell.self).initialize(â€¦)`.
public func mock(_ type: iOSSwiftPay.MoneyTransactionTableViewCell.Type, file: StaticString = #file, line: UInt = #line) -> MoneyTransactionTableViewCellMock.InitializerProxy.Type {
  return MoneyTransactionTableViewCellMock.InitializerProxy.self
}

// MARK: - Mocked SceneDelegate

public final class SceneDelegateMock: Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }
}

@available(*, unavailable, message: "'SceneDelegate' does not declare any accessible designated initializers and cannot be mocked")
public func mock(_ type: iOSSwiftPay.SceneDelegate.Type, file: StaticString = #file, line: UInt = #line) -> SceneDelegateMock {
  fatalError()
}

// MARK: - Mocked SettingsViewController

public final class SettingsViewControllerMock: iOSSwiftPay.SettingsViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> SettingsViewControllerMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?, __file: StaticString = #file, __line: UInt = #line) -> SettingsViewControllerMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?)

  public required override init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `logOffBtnTapped`(`sender`: UIButton!)

  public override func `logOffBtnTapped`(`sender`: UIButton!) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `logOffBtnTapped`(`sender`: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(SettingsViewController.self).initialize(â€¦)`.
public func mock(_ type: iOSSwiftPay.SettingsViewController.Type, file: StaticString = #file, line: UInt = #line) -> SettingsViewControllerMock.InitializerProxy.Type {
  return SettingsViewControllerMock.InitializerProxy.self
}

// MARK: - Mocked SignInPresenter

public final class SignInPresenterMock: iOSSwiftPay.SignInPresenter, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`signInViewDelagate`: iOSSwiftPay.SignInViewDelagate?, `validationService`: iOSSwiftPay.ValidationService, `client`: iOSSwiftPay.ClientProtocol, __file: StaticString = #file, __line: UInt = #line) -> SignInPresenterMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked client

  override public var `client`: iOSSwiftPay.ClientProtocol { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getClient() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.ClientProtocol, iOSSwiftPay.ClientProtocol> { fatalError("See 'Thunk Pruning' in the README") }

  public func setClient(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.ClientProtocol) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.ClientProtocol) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked validationService

  override public var `validationService`: iOSSwiftPay.ValidationService { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getValidationService() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.ValidationService, iOSSwiftPay.ValidationService> { fatalError("See 'Thunk Pruning' in the README") }

  public func setValidationService(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.ValidationService) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.ValidationService) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `SignIn`(_ `email`: String?, _ `password`: String?)

  public override func `SignIn`(_ `email`: String?, _ `password`: String?) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `SignIn`(_ `email`: @escaping @autoclosure () -> String?, _ `password`: @escaping @autoclosure () -> String?) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, String?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `setViewDelegate`(`signInViewDelagate`: iOSSwiftPay.SignInViewDelagate?)

  public override func `setViewDelegate`(`signInViewDelagate`: iOSSwiftPay.SignInViewDelagate?) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `setViewDelegate`(`signInViewDelagate`: @escaping @autoclosure () -> iOSSwiftPay.SignInViewDelagate?) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (iOSSwiftPay.SignInViewDelagate?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`signInViewDelagate`: iOSSwiftPay.SignInViewDelagate?, `validationService`: iOSSwiftPay.ValidationService, `client`: iOSSwiftPay.ClientProtocol)

  public required override init(`signInViewDelagate`: iOSSwiftPay.SignInViewDelagate?, `validationService`: iOSSwiftPay.ValidationService, `client`: iOSSwiftPay.ClientProtocol) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(SignInPresenter.self).initialize(â€¦)`.
public func mock(_ type: iOSSwiftPay.SignInPresenter.Type, file: StaticString = #file, line: UInt = #line) -> SignInPresenterMock.InitializerProxy.Type {
  return SignInPresenterMock.InitializerProxy.self
}

// MARK: - Mocked SignInVC

public final class SignInVCMock: iOSSwiftPay.SignInVC, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> SignInVCMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`validation`: iOSSwiftPay.ValidationService, __file: StaticString = #file, __line: UInt = #line) -> SignInVCMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked SignInBtn

  override public var `SignInBtn`: UIButton! { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getSignInBtn() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UIButton, UIButton> { fatalError("See 'Thunk Pruning' in the README") }

  public func setSignInBtn(_ newValue: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked copyrightLabel

  override public var `copyrightLabel`: UIKit.UILabel! { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getCopyrightLabel() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UIKit.UILabel, UIKit.UILabel> { fatalError("See 'Thunk Pruning' in the README") }

  public func setCopyrightLabel(_ newValue: @escaping @autoclosure () -> UIKit.UILabel) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UIKit.UILabel) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked createAccountBtn

  override public var `createAccountBtn`: UIButton! { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getCreateAccountBtn() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UIButton, UIButton> { fatalError("See 'Thunk Pruning' in the README") }

  public func setCreateAccountBtn(_ newValue: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked emailTxField

  override public var `emailTxField`: UITextField! { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getEmailTxField() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UITextField, UITextField> { fatalError("See 'Thunk Pruning' in the README") }

  public func setEmailTxField(_ newValue: @escaping @autoclosure () -> UITextField) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UITextField) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked errorStatusLabel

  override public var `errorStatusLabel`: UIKit.UILabel! { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getErrorStatusLabel() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UIKit.UILabel, UIKit.UILabel> { fatalError("See 'Thunk Pruning' in the README") }

  public func setErrorStatusLabel(_ newValue: @escaping @autoclosure () -> UIKit.UILabel) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UIKit.UILabel) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked passwordTxField

  override public var `passwordTxField`: UITextField! { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getPasswordTxField() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UITextField, UITextField> { fatalError("See 'Thunk Pruning' in the README") }

  public func setPasswordTxField(_ newValue: @escaping @autoclosure () -> UITextField) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UITextField) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked signInActivityIndicator

  override public var `signInActivityIndicator`: UIActivityIndicatorView! { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getSignInActivityIndicator() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UIActivityIndicatorView, UIActivityIndicatorView> { fatalError("See 'Thunk Pruning' in the README") }

  public func setSignInActivityIndicator(_ newValue: @escaping @autoclosure () -> UIActivityIndicatorView) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UIActivityIndicatorView) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `setPlaceholders`()

  public override func `setPlaceholders`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `setPlaceholders`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `styleVisualElements`()

  public override func `styleVisualElements`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `styleVisualElements`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `SignInBtnTapped`(_ `sender`: Any)

  public override func `SignInBtnTapped`(_ `sender`: Any) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `SignInBtnTapped`(_ `sender`: @escaping @autoclosure () -> Any) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Any) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `toggleActivityIndicator`(_ `show`: Bool)

  public override func `toggleActivityIndicator`(_ `show`: Bool) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `toggleActivityIndicator`(_ `show`: @escaping @autoclosure () -> Bool) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Bool) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`validation`: iOSSwiftPay.ValidationService)

  public required override init(`validation`: iOSSwiftPay.ValidationService) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(SignInVC.self).initialize(â€¦)`.
public func mock(_ type: iOSSwiftPay.SignInVC.Type, file: StaticString = #file, line: UInt = #line) -> SignInVCMock.InitializerProxy.Type {
  return SignInVCMock.InitializerProxy.self
}

// MARK: - Mocked SignInViewController

public final class SignInViewControllerMock: iOSSwiftPay.SignInViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> SignInViewControllerMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`signInPresenter`: iOSSwiftPay.SignInPresenter, __file: StaticString = #file, __line: UInt = #line) -> SignInViewControllerMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked `hideProgress`()

  public override func `hideProgress`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `hideProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `loginDidSucceed`()

  public override func `loginDidSucceed`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `loginDidSucceed`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `showProgress`()

  public override func `showProgress`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `showProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `loginDidFailed`(`message`: String)

  public override func `loginDidFailed`(`message`: String) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `loginDidFailed`(`message`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `signInBtnTapped`(`sender`: UIButton!)

  public override func `signInBtnTapped`(`sender`: UIButton!) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `signInBtnTapped`(`sender`: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`signInPresenter`: iOSSwiftPay.SignInPresenter)

  public required override init(`signInPresenter`: iOSSwiftPay.SignInPresenter) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(SignInViewController.self).initialize(â€¦)`.
public func mock(_ type: iOSSwiftPay.SignInViewController.Type, file: StaticString = #file, line: UInt = #line) -> SignInViewControllerMock.InitializerProxy.Type {
  return SignInViewControllerMock.InitializerProxy.self
}

// MARK: - Mocked SignInViewDelagate

public final class SignInViewDelagateMock: iOSSwiftPay.SignInViewDelagate, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? {
    get { return self.stubbingContext.sourceLocation }
    set {
      self.stubbingContext.sourceLocation = newValue
      SignInViewDelagateMock.staticMock.stubbingContext.sourceLocation = newValue
    }
  }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `hideProgress`()

  public func `hideProgress`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`hideProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `hideProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`hideProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `loginDidSucceed`()

  public func `loginDidSucceed`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`loginDidSucceed`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `loginDidSucceed`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`loginDidSucceed`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `showProgress`()

  public func `showProgress`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `showProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `loginDidFailed`(`message`: String)

  public func `loginDidFailed`(`message`: String) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`loginDidFailed`(`message`: String) -> Void", arguments: [Mockingbird.ArgumentMatcher(`message`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String) -> Void {
        concreteImplementation(`message`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `loginDidFailed`(`message`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`message`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`loginDidFailed`(`message`: String) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void>(mock: self, invocation: invocation)
  }
}

/// Returns a concrete mock of `SignInViewDelagate`.
public func mock(_ type: iOSSwiftPay.SignInViewDelagate.Protocol, file: StaticString = #file, line: UInt = #line) -> SignInViewDelagateMock {
  return SignInViewDelagateMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked SignUpViewController

public final class SignUpViewControllerMock: iOSSwiftPay.SignUpViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> SignUpViewControllerMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`firebaseClient`: iOSSwiftPay.ClientProtocol, __file: StaticString = #file, __line: UInt = #line) -> SignUpViewControllerMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `signUpBtnTapped`(`sender`: UIButton!)

  public override func `signUpBtnTapped`(`sender`: UIButton!) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `signUpBtnTapped`(`sender`: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`firebaseClient`: iOSSwiftPay.ClientProtocol)

  public required override init(`firebaseClient`: iOSSwiftPay.ClientProtocol) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(SignUpViewController.self).initialize(â€¦)`.
public func mock(_ type: iOSSwiftPay.SignUpViewController.Type, file: StaticString = #file, line: UInt = #line) -> SignUpViewControllerMock.InitializerProxy.Type {
  return SignUpViewControllerMock.InitializerProxy.self
}

// MARK: - Mocked TransferViewController

public final class TransferViewControllerMock: iOSSwiftPay.TransferViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> TransferViewControllerMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?, __file: StaticString = #file, __line: UInt = #line) -> TransferViewControllerMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?)

  public required override init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `moneyTransferBtnTapped`(`sender`: UIButton!)

  public override func `moneyTransferBtnTapped`(`sender`: UIButton!) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `moneyTransferBtnTapped`(`sender`: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(TransferViewController.self).initialize(â€¦)`.
public func mock(_ type: iOSSwiftPay.TransferViewController.Type, file: StaticString = #file, line: UInt = #line) -> TransferViewControllerMock.InitializerProxy.Type {
  return TransferViewControllerMock.InitializerProxy.self
}

// MARK: - Mocked UserInfoViewController

public final class UserInfoViewControllerMock: iOSSwiftPay.UserInfoViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> UserInfoViewControllerMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?, __file: StaticString = #file, __line: UInt = #line) -> UserInfoViewControllerMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked transactions

  override public var `transactions`: [iOSSwiftPay.MoneyTransactionMock] { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getTransactions() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> [iOSSwiftPay.MoneyTransactionMock], [iOSSwiftPay.MoneyTransactionMock]> { fatalError("See 'Thunk Pruning' in the README") }

  public func setTransactions(_ newValue: @escaping @autoclosure () -> [iOSSwiftPay.MoneyTransactionMock]) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, ([iOSSwiftPay.MoneyTransactionMock]) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `tableView`(_ `tableView`: UITableView, `heightForRowAt` `indexPath`: IndexPath)

  public override func `tableView`(_ `tableView`: UITableView, `heightForRowAt` `indexPath`: IndexPath) -> CGFloat { fatalError("See 'Thunk Pruning' in the README") }

  public func `tableView`(_ `tableView`: @escaping @autoclosure () -> UITableView, `heightForRowAt` `indexPath`: @escaping @autoclosure () -> IndexPath) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UITableView, IndexPath) -> CGFloat, CGFloat> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `tableView`(_ `tableView`: UITableView, `numberOfRowsInSection` `section`: Int)

  public override func `tableView`(_ `tableView`: UITableView, `numberOfRowsInSection` `section`: Int) -> Int { fatalError("See 'Thunk Pruning' in the README") }

  public func `tableView`(_ `tableView`: @escaping @autoclosure () -> UITableView, `numberOfRowsInSection` `section`: @escaping @autoclosure () -> Int) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UITableView, Int) -> Int, Int> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `tableView`(_ `tableView`: UITableView, `cellForRowAt` `indexPath`: IndexPath)

  public override func `tableView`(_ `tableView`: UITableView, `cellForRowAt` `indexPath`: IndexPath) -> UITableViewCell { fatalError("See 'Thunk Pruning' in the README") }

  public func `tableView`(_ `tableView`: @escaping @autoclosure () -> UITableView, `cellForRowAt` `indexPath`: @escaping @autoclosure () -> IndexPath) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UITableView, IndexPath) -> UITableViewCell, UITableViewCell> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?)

  public required override init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `showBalanceBtnTapped`(`sender`: UIButton!)

  public override func `showBalanceBtnTapped`(`sender`: UIButton!) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `showBalanceBtnTapped`(`sender`: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(UserInfoViewController.self).initialize(â€¦)`.
public func mock(_ type: iOSSwiftPay.UserInfoViewController.Type, file: StaticString = #file, line: UInt = #line) -> UserInfoViewControllerMock.InitializerProxy.Type {
  return UserInfoViewControllerMock.InitializerProxy.self
}

// MARK: - Mocked Utilities

public final class UtilitiesMock: iOSSwiftPay.Utilities, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }
}

/// Returns a concrete mock of `Utilities`.
public func mock(_ type: iOSSwiftPay.Utilities.Type, file: StaticString = #file, line: UInt = #line) -> UtilitiesMock {
  return UtilitiesMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked ViewController

public final class ViewControllerMock: Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }
}

@available(*, unavailable, message: "'ViewController' does not declare any accessible designated initializers and cannot be mocked")
public func mock(_ type: iOSSwiftPay.ViewController.Type, file: StaticString = #file, line: UInt = #line) -> ViewControllerMock {
  fatalError()
}

//
//  iOSSwiftPayTests-iOSSwiftPayMocks.generated.swift
//  iOSSwiftPay
//
//  Generated by Mockingbird v0.16.0.
//  DO NOT EDIT
//

@testable import Mockingbird
@testable import iOSSwiftPay
import Firebase
import Foundation
import Swift
import UIKit

private var genericTypesStaticMocks = Mockingbird.Synchronized<[String: Mockingbird.StaticMock]>([:])

// MARK: - Mocked AppDelegate

public final class AppDelegateMock: Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }
}

@available(*, unavailable, message: "'AppDelegate' does not declare any accessible designated initializers and cannot be mocked")
public func mock(_ type: iOSSwiftPay.AppDelegate.Type, file: StaticString = #file, line: UInt = #line) -> AppDelegateMock {
  fatalError()
}

// MARK: - Mocked ClientProtocol

public final class ClientProtocolMock: iOSSwiftPay.ClientProtocol, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? {
    get { return self.stubbingContext.sourceLocation }
    set {
      self.stubbingContext.sourceLocation = newValue
      ClientProtocolMock.staticMock.stubbingContext.sourceLocation = newValue
    }
  }

  // MARK: Mocked responseHandler

  public var `responseHandler`: iOSSwiftPay.ResponseHandler {
    get {
      let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "responseHandler.get", arguments: [], returnType: Swift.ObjectIdentifier((iOSSwiftPay.ResponseHandler).self))
      return self.mockingContext.didInvoke(invocation) { () -> iOSSwiftPay.ResponseHandler in
        let implementation = self.stubbingContext.implementation(for: invocation)
        if let concreteImplementation = implementation as? () -> iOSSwiftPay.ResponseHandler {
          return concreteImplementation()
        } else if let defaultValue = self.stubbingContext.defaultValueProvider.provideValue(for: (iOSSwiftPay.ResponseHandler).self) {
          return defaultValue
        } else {
          fatalError(self.stubbingContext.failTest(for: invocation))
        }
      }
    }
    set {
      let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "responseHandler.set", arguments: [ArgumentMatcher(newValue)], returnType: Swift.ObjectIdentifier(Void.self))
      self.mockingContext.didInvoke(invocation)
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (iOSSwiftPay.ResponseHandler) -> Void {
        concreteImplementation(newValue)
      } else {
        (implementation as? () -> Void)?()
      }
    }
  }

  public func getResponseHandler() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.ResponseHandler, iOSSwiftPay.ResponseHandler> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "responseHandler.get", arguments: [], returnType: Swift.ObjectIdentifier((iOSSwiftPay.ResponseHandler).self))
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.ResponseHandler, iOSSwiftPay.ResponseHandler>(mock: self, invocation: invocation)
  }

  public func setResponseHandler(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.ResponseHandler) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.ResponseHandler) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(newValue)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "responseHandler.set", arguments: arguments, returnType: Swift.ObjectIdentifier(Void.self))
    return Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.ResponseHandler) -> Void, Void>(mock: self, invocation: invocation)
  }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `saveResultOnUserDefaults`(_ `result`: String, _ `key`: String)

  public func `saveResultOnUserDefaults`(_ `result`: String, _ `key`: String) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`saveResultOnUserDefaults`(_ `result`: String, _ `key`: String) -> Void", arguments: [Mockingbird.ArgumentMatcher(`result`), Mockingbird.ArgumentMatcher(`key`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String, String) -> Void {
        concreteImplementation(`result`, `key`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `saveResultOnUserDefaults`(_ `result`: @escaping @autoclosure () -> String, _ `key`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, String) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`result`), Mockingbird.resolve(`key`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`saveResultOnUserDefaults`(_ `result`: String, _ `key`: String) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, String) -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `getUserInfo`(_ `email`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ())

  public func `getUserInfo`(_ `email`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`getUserInfo`(_ `email`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void", arguments: [Mockingbird.ArgumentMatcher(`email`), Mockingbird.ArgumentMatcher(`completionHandler`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void {
        concreteImplementation(`email`, `completionHandler`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `getUserInfo`(_ `email`: @escaping @autoclosure () -> String?, `completionHandler`: @escaping @autoclosure () -> (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`email`), Mockingbird.resolve(`completionHandler`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`getUserInfo`(_ `email`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `signIn`(_ `email`: String?, _ `password`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ())

  public func `signIn`(_ `email`: String?, _ `password`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`signIn`(_ `email`: String?, _ `password`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void", arguments: [Mockingbird.ArgumentMatcher(`email`), Mockingbird.ArgumentMatcher(`password`), Mockingbird.ArgumentMatcher(`completionHandler`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String?, String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void {
        concreteImplementation(`email`, `password`, `completionHandler`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `signIn`(_ `email`: @escaping @autoclosure () -> String?, _ `password`: @escaping @autoclosure () -> String?, `completionHandler`: @escaping @autoclosure () -> (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`email`), Mockingbird.resolve(`password`), Mockingbird.resolve(`completionHandler`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`signIn`(_ `email`: String?, _ `password`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `createUserOnDB`(_ `name`: String?, _ `lastName`: String?, _ `email`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ())

  public func `createUserOnDB`(_ `name`: String?, _ `lastName`: String?, _ `email`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`createUserOnDB`(_ `name`: String?, _ `lastName`: String?, _ `email`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void", arguments: [Mockingbird.ArgumentMatcher(`name`), Mockingbird.ArgumentMatcher(`lastName`), Mockingbird.ArgumentMatcher(`email`), Mockingbird.ArgumentMatcher(`completionHandler`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String?, String?, String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void {
        concreteImplementation(`name`, `lastName`, `email`, `completionHandler`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `createUserOnDB`(_ `name`: @escaping @autoclosure () -> String?, _ `lastName`: @escaping @autoclosure () -> String?, _ `email`: @escaping @autoclosure () -> String?, `completionHandler`: @escaping @autoclosure () -> (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, String?, String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`name`), Mockingbird.resolve(`lastName`), Mockingbird.resolve(`email`), Mockingbird.resolve(`completionHandler`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`createUserOnDB`(_ `name`: String?, _ `lastName`: String?, _ `email`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, String?, String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `signUp`(_ `name`: String?, _ `lastName`: String?, _ `email`: String?, _ `password`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ())

  public func `signUp`(_ `name`: String?, _ `lastName`: String?, _ `email`: String?, _ `password`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`signUp`(_ `name`: String?, _ `lastName`: String?, _ `email`: String?, _ `password`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void", arguments: [Mockingbird.ArgumentMatcher(`name`), Mockingbird.ArgumentMatcher(`lastName`), Mockingbird.ArgumentMatcher(`email`), Mockingbird.ArgumentMatcher(`password`), Mockingbird.ArgumentMatcher(`completionHandler`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String?, String?, String?, String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void {
        concreteImplementation(`name`, `lastName`, `email`, `password`, `completionHandler`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `signUp`(_ `name`: @escaping @autoclosure () -> String?, _ `lastName`: @escaping @autoclosure () -> String?, _ `email`: @escaping @autoclosure () -> String?, _ `password`: @escaping @autoclosure () -> String?, `completionHandler`: @escaping @autoclosure () -> (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, String?, String?, String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`name`), Mockingbird.resolve(`lastName`), Mockingbird.resolve(`email`), Mockingbird.resolve(`password`), Mockingbird.resolve(`completionHandler`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`signUp`(_ `name`: String?, _ `lastName`: String?, _ `email`: String?, _ `password`: String?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, String?, String?, String?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `performTransaction`(_ `senderEmail`: String?, _ `receiverEmail`: String?, _ `amount`: Double?, _ `transactionType`: String?, _ `transactionDate`: TimeInterval?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ())

  public func `performTransaction`(_ `senderEmail`: String?, _ `receiverEmail`: String?, _ `amount`: Double?, _ `transactionType`: String?, _ `transactionDate`: TimeInterval?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`performTransaction`(_ `senderEmail`: String?, _ `receiverEmail`: String?, _ `amount`: Double?, _ `transactionType`: String?, _ `transactionDate`: TimeInterval?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void", arguments: [Mockingbird.ArgumentMatcher(`senderEmail`), Mockingbird.ArgumentMatcher(`receiverEmail`), Mockingbird.ArgumentMatcher(`amount`), Mockingbird.ArgumentMatcher(`transactionType`), Mockingbird.ArgumentMatcher(`transactionDate`), Mockingbird.ArgumentMatcher(`completionHandler`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String?, String?, Double?, String?, TimeInterval?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void {
        concreteImplementation(`senderEmail`, `receiverEmail`, `amount`, `transactionType`, `transactionDate`, `completionHandler`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `performTransaction`(_ `senderEmail`: @escaping @autoclosure () -> String?, _ `receiverEmail`: @escaping @autoclosure () -> String?, _ `amount`: @escaping @autoclosure () -> Double?, _ `transactionType`: @escaping @autoclosure () -> String?, _ `transactionDate`: @escaping @autoclosure () -> TimeInterval?, `completionHandler`: @escaping @autoclosure () -> (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, String?, Double?, String?, TimeInterval?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`senderEmail`), Mockingbird.resolve(`receiverEmail`), Mockingbird.resolve(`amount`), Mockingbird.resolve(`transactionType`), Mockingbird.resolve(`transactionDate`), Mockingbird.resolve(`completionHandler`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`performTransaction`(_ `senderEmail`: String?, _ `receiverEmail`: String?, _ `amount`: Double?, _ `transactionType`: String?, _ `transactionDate`: TimeInterval?, `completionHandler`: @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, String?, Double?, String?, TimeInterval?, @escaping (Result<String, iOSSwiftPay.ValidationError>) -> ()) -> Void, Void>(mock: self, invocation: invocation)
  }
}

/// Returns a concrete mock of `ClientProtocol`.
public func mock(_ type: iOSSwiftPay.ClientProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> ClientProtocolMock {
  return ClientProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked DepositPresenter

public final class DepositPresenterMock: iOSSwiftPay.DepositPresenter, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`viewDelegate`: iOSSwiftPay.DepositViewDelegate?, `userDefaults`: iOSSwiftPay.UserDefaultsProtocol, `client`: iOSSwiftPay.ClientProtocol, `validationService`: iOSSwiftPay.ValidationService, __file: StaticString = #file, __line: UInt = #line) -> DepositPresenterMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked client

  override public var `client`: iOSSwiftPay.ClientProtocol { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getClient() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.ClientProtocol, iOSSwiftPay.ClientProtocol> { fatalError("See 'Thunk Pruning' in the README") }

  public func setClient(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.ClientProtocol) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.ClientProtocol) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked userDefaults

  override public var `userDefaults`: iOSSwiftPay.UserDefaultsProtocol { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getUserDefaults() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.UserDefaultsProtocol, iOSSwiftPay.UserDefaultsProtocol> { fatalError("See 'Thunk Pruning' in the README") }

  public func setUserDefaults(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.UserDefaultsProtocol) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.UserDefaultsProtocol) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked validationService

  override public var `validationService`: iOSSwiftPay.ValidationService { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getValidationService() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.ValidationService, iOSSwiftPay.ValidationService> { fatalError("See 'Thunk Pruning' in the README") }

  public func setValidationService(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.ValidationService) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.ValidationService) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `performDepositTransaction`(_ `amount`: String?)

  public override func `performDepositTransaction`(_ `amount`: String?) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `performDepositTransaction`(_ `amount`: @escaping @autoclosure () -> String?) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `setViewDelegate`(_ `viewDelegate`: iOSSwiftPay.DepositViewDelegate)

  public override func `setViewDelegate`(_ `viewDelegate`: iOSSwiftPay.DepositViewDelegate) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `setViewDelegate`(_ `viewDelegate`: @escaping @autoclosure () -> iOSSwiftPay.DepositViewDelegate) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (iOSSwiftPay.DepositViewDelegate) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`viewDelegate`: iOSSwiftPay.DepositViewDelegate?, `userDefaults`: iOSSwiftPay.UserDefaultsProtocol, `client`: iOSSwiftPay.ClientProtocol, `validationService`: iOSSwiftPay.ValidationService)

  public required override init(`viewDelegate`: iOSSwiftPay.DepositViewDelegate?, `userDefaults`: iOSSwiftPay.UserDefaultsProtocol, `client`: iOSSwiftPay.ClientProtocol, `validationService`: iOSSwiftPay.ValidationService) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(DepositPresenter.self).initialize(…)`.
public func mock(_ type: iOSSwiftPay.DepositPresenter.Type, file: StaticString = #file, line: UInt = #line) -> DepositPresenterMock.InitializerProxy.Type {
  return DepositPresenterMock.InitializerProxy.self
}

// MARK: - Mocked DepositViewController

public final class DepositViewControllerMock: iOSSwiftPay.DepositViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> DepositViewControllerMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`presenter`: iOSSwiftPay.DepositPresenter, __file: StaticString = #file, __line: UInt = #line) -> DepositViewControllerMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked `hideProgress`()

  public override func `hideProgress`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `hideProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `showProgress`()

  public override func `showProgress`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `showProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `showMessage`(_ `message`: String?, _ `color`: UIColor)

  public override func `showMessage`(_ `message`: String?, _ `color`: UIColor) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `showMessage`(_ `message`: @escaping @autoclosure () -> String?, _ `color`: @escaping @autoclosure () -> UIColor) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, UIColor) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `moneyDepositBtnTapped`(`sender`: UIButton!)

  public override func `moneyDepositBtnTapped`(`sender`: UIButton!) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `moneyDepositBtnTapped`(`sender`: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`presenter`: iOSSwiftPay.DepositPresenter)

  public required override init(`presenter`: iOSSwiftPay.DepositPresenter) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(DepositViewController.self).initialize(…)`.
public func mock(_ type: iOSSwiftPay.DepositViewController.Type, file: StaticString = #file, line: UInt = #line) -> DepositViewControllerMock.InitializerProxy.Type {
  return DepositViewControllerMock.InitializerProxy.self
}

// MARK: - Mocked DepositViewDelegate

public final class DepositViewDelegateMock: iOSSwiftPay.DepositViewDelegate, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? {
    get { return self.stubbingContext.sourceLocation }
    set {
      self.stubbingContext.sourceLocation = newValue
      DepositViewDelegateMock.staticMock.stubbingContext.sourceLocation = newValue
    }
  }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `hideProgress`()

  public func `hideProgress`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`hideProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `hideProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`hideProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `showProgress`()

  public func `showProgress`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `showProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `showMessage`(_ `message`: String?, _ `color`: UIColor)

  public func `showMessage`(_ `message`: String?, _ `color`: UIColor) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showMessage`(_ `message`: String?, _ `color`: UIColor) -> Void", arguments: [Mockingbird.ArgumentMatcher(`message`), Mockingbird.ArgumentMatcher(`color`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String?, UIColor) -> Void {
        concreteImplementation(`message`, `color`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `showMessage`(_ `message`: @escaping @autoclosure () -> String?, _ `color`: @escaping @autoclosure () -> UIColor) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, UIColor) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`message`), Mockingbird.resolve(`color`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showMessage`(_ `message`: String?, _ `color`: UIColor) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, UIColor) -> Void, Void>(mock: self, invocation: invocation)
  }
}

/// Returns a concrete mock of `DepositViewDelegate`.
public func mock(_ type: iOSSwiftPay.DepositViewDelegate.Protocol, file: StaticString = #file, line: UInt = #line) -> DepositViewDelegateMock {
  return DepositViewDelegateMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked HomeViewController

public final class HomeViewControllerMock: Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }
}

@available(*, unavailable, message: "'HomeViewController' does not declare any accessible designated initializers and cannot be mocked")
public func mock(_ type: iOSSwiftPay.HomeViewController.Type, file: StaticString = #file, line: UInt = #line) -> HomeViewControllerMock {
  fatalError()
}

// MARK: - Mocked MoneyTransactionTableViewCell

public final class MoneyTransactionTableViewCellMock: iOSSwiftPay.MoneyTransactionTableViewCell, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder` `aDecoder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> MoneyTransactionTableViewCellMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`style`: UITableViewCell.CellStyle, `reuseIdentifier`: String?, __file: StaticString = #file, __line: UInt = #line) -> MoneyTransactionTableViewCellMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked init?(`coder` `aDecoder`: NSCoder)

  public required init?(`coder` `aDecoder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`style`: UITableViewCell.CellStyle, `reuseIdentifier`: String?)

  public required override init(`style`: UITableViewCell.CellStyle, `reuseIdentifier`: String?) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(MoneyTransactionTableViewCell.self).initialize(…)`.
public func mock(_ type: iOSSwiftPay.MoneyTransactionTableViewCell.Type, file: StaticString = #file, line: UInt = #line) -> MoneyTransactionTableViewCellMock.InitializerProxy.Type {
  return MoneyTransactionTableViewCellMock.InitializerProxy.self
}

// MARK: - Mocked SceneDelegate

public final class SceneDelegateMock: Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }
}

@available(*, unavailable, message: "'SceneDelegate' does not declare any accessible designated initializers and cannot be mocked")
public func mock(_ type: iOSSwiftPay.SceneDelegate.Type, file: StaticString = #file, line: UInt = #line) -> SceneDelegateMock {
  fatalError()
}

// MARK: - Mocked SettingsViewController

public final class SettingsViewControllerMock: iOSSwiftPay.SettingsViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> SettingsViewControllerMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?, __file: StaticString = #file, __line: UInt = #line) -> SettingsViewControllerMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?)

  public required override init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `logOffBtnTapped`(`sender`: UIButton!)

  public override func `logOffBtnTapped`(`sender`: UIButton!) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `logOffBtnTapped`(`sender`: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(SettingsViewController.self).initialize(…)`.
public func mock(_ type: iOSSwiftPay.SettingsViewController.Type, file: StaticString = #file, line: UInt = #line) -> SettingsViewControllerMock.InitializerProxy.Type {
  return SettingsViewControllerMock.InitializerProxy.self
}

// MARK: - Mocked SignInPresenter

public final class SignInPresenterMock: iOSSwiftPay.SignInPresenter, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`signInViewDelagate`: iOSSwiftPay.SignInViewDelegate?, `validationService`: iOSSwiftPay.ValidationService, `client`: iOSSwiftPay.ClientProtocol, `userDefaults`: iOSSwiftPay.UserDefaultsProtocol, __file: StaticString = #file, __line: UInt = #line) -> SignInPresenterMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked client

  override public var `client`: iOSSwiftPay.ClientProtocol { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getClient() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.ClientProtocol, iOSSwiftPay.ClientProtocol> { fatalError("See 'Thunk Pruning' in the README") }

  public func setClient(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.ClientProtocol) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.ClientProtocol) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked userDefaults

  override public var `userDefaults`: iOSSwiftPay.UserDefaultsProtocol { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getUserDefaults() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.UserDefaultsProtocol, iOSSwiftPay.UserDefaultsProtocol> { fatalError("See 'Thunk Pruning' in the README") }

  public func setUserDefaults(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.UserDefaultsProtocol) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.UserDefaultsProtocol) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked validationService

  override public var `validationService`: iOSSwiftPay.ValidationService { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getValidationService() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.ValidationService, iOSSwiftPay.ValidationService> { fatalError("See 'Thunk Pruning' in the README") }

  public func setValidationService(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.ValidationService) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.ValidationService) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `navigateToSignUp`()

  public override func `navigateToSignUp`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `navigateToSignUp`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `signIn`(_ `email`: String?, _ `password`: String?)

  public override func `signIn`(_ `email`: String?, _ `password`: String?) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `signIn`(_ `email`: @escaping @autoclosure () -> String?, _ `password`: @escaping @autoclosure () -> String?) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, String?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `setViewDelegate`(`signInViewDelagate`: iOSSwiftPay.SignInViewDelegate?)

  public override func `setViewDelegate`(`signInViewDelagate`: iOSSwiftPay.SignInViewDelegate?) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `setViewDelegate`(`signInViewDelagate`: @escaping @autoclosure () -> iOSSwiftPay.SignInViewDelegate?) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (iOSSwiftPay.SignInViewDelegate?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`signInViewDelagate`: iOSSwiftPay.SignInViewDelegate?, `validationService`: iOSSwiftPay.ValidationService, `client`: iOSSwiftPay.ClientProtocol, `userDefaults`: iOSSwiftPay.UserDefaultsProtocol)

  public required override init(`signInViewDelagate`: iOSSwiftPay.SignInViewDelegate?, `validationService`: iOSSwiftPay.ValidationService, `client`: iOSSwiftPay.ClientProtocol, `userDefaults`: iOSSwiftPay.UserDefaultsProtocol) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(SignInPresenter.self).initialize(…)`.
public func mock(_ type: iOSSwiftPay.SignInPresenter.Type, file: StaticString = #file, line: UInt = #line) -> SignInPresenterMock.InitializerProxy.Type {
  return SignInPresenterMock.InitializerProxy.self
}

// MARK: - Mocked SignInViewController

public final class SignInViewControllerMock: iOSSwiftPay.SignInViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> SignInViewControllerMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`signInPresenter`: iOSSwiftPay.SignInPresenter, __file: StaticString = #file, __line: UInt = #line) -> SignInViewControllerMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked `hideProgress`()

  public override func `hideProgress`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `hideProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `loginDidSucceed`()

  public override func `loginDidSucceed`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `loginDidSucceed`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `navigateToSignUp`()

  public override func `navigateToSignUp`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `navigateToSignUp`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `showProgress`()

  public override func `showProgress`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `showProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `loginDidFailed`(`message`: String)

  public override func `loginDidFailed`(`message`: String) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `loginDidFailed`(`message`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `signInBtnTapped`(`sender`: UIButton!)

  public override func `signInBtnTapped`(`sender`: UIButton!) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `signInBtnTapped`(`sender`: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `signUpBtnTapped`(`sender`: UIButton!)

  public override func `signUpBtnTapped`(`sender`: UIButton!) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `signUpBtnTapped`(`sender`: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`signInPresenter`: iOSSwiftPay.SignInPresenter)

  public required override init(`signInPresenter`: iOSSwiftPay.SignInPresenter) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(SignInViewController.self).initialize(…)`.
public func mock(_ type: iOSSwiftPay.SignInViewController.Type, file: StaticString = #file, line: UInt = #line) -> SignInViewControllerMock.InitializerProxy.Type {
  return SignInViewControllerMock.InitializerProxy.self
}

// MARK: - Mocked SignInViewDelegate

public final class SignInViewDelegateMock: iOSSwiftPay.SignInViewDelegate, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? {
    get { return self.stubbingContext.sourceLocation }
    set {
      self.stubbingContext.sourceLocation = newValue
      SignInViewDelegateMock.staticMock.stubbingContext.sourceLocation = newValue
    }
  }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `hideProgress`()

  public func `hideProgress`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`hideProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `hideProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`hideProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `loginDidSucceed`()

  public func `loginDidSucceed`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`loginDidSucceed`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `loginDidSucceed`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`loginDidSucceed`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `navigateToSignUp`()

  public func `navigateToSignUp`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`navigateToSignUp`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `navigateToSignUp`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`navigateToSignUp`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `showProgress`()

  public func `showProgress`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `showProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `loginDidFailed`(`message`: String)

  public func `loginDidFailed`(`message`: String) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`loginDidFailed`(`message`: String) -> Void", arguments: [Mockingbird.ArgumentMatcher(`message`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String) -> Void {
        concreteImplementation(`message`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `loginDidFailed`(`message`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`message`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`loginDidFailed`(`message`: String) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void>(mock: self, invocation: invocation)
  }
}

/// Returns a concrete mock of `SignInViewDelegate`.
public func mock(_ type: iOSSwiftPay.SignInViewDelegate.Protocol, file: StaticString = #file, line: UInt = #line) -> SignInViewDelegateMock {
  return SignInViewDelegateMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked SignUpPresenter

public final class SignUpPresenterMock: iOSSwiftPay.SignUpPresenter, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`signUpViewDelegate`: iOSSwiftPay.SignUpViewDelegate?, `validationService`: iOSSwiftPay.ValidationService, `client`: iOSSwiftPay.ClientProtocol, `userDefaults`: iOSSwiftPay.UserDefaultsProtocol, __file: StaticString = #file, __line: UInt = #line) -> SignUpPresenterMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked client

  override public var `client`: iOSSwiftPay.ClientProtocol { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getClient() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.ClientProtocol, iOSSwiftPay.ClientProtocol> { fatalError("See 'Thunk Pruning' in the README") }

  public func setClient(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.ClientProtocol) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.ClientProtocol) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked userDefaults

  override public var `userDefaults`: iOSSwiftPay.UserDefaultsProtocol { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getUserDefaults() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.UserDefaultsProtocol, iOSSwiftPay.UserDefaultsProtocol> { fatalError("See 'Thunk Pruning' in the README") }

  public func setUserDefaults(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.UserDefaultsProtocol) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.UserDefaultsProtocol) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked validationService

  override public var `validationService`: iOSSwiftPay.ValidationService { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getValidationService() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.ValidationService, iOSSwiftPay.ValidationService> { fatalError("See 'Thunk Pruning' in the README") }

  public func setValidationService(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.ValidationService) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.ValidationService) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `createUserOnDB`(_ `name`: String, _ `lastName`: String, _ `email`: String)

  public override func `createUserOnDB`(_ `name`: String, _ `lastName`: String, _ `email`: String) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `createUserOnDB`(_ `name`: @escaping @autoclosure () -> String, _ `lastName`: @escaping @autoclosure () -> String, _ `email`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, String, String) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `signUp`(_ `name`: String?, _ `lastName`: String?, _ `email`: String?, _ `passwordA`: String?, _ `passwordB`: String?)

  public override func `signUp`(_ `name`: String?, _ `lastName`: String?, _ `email`: String?, _ `passwordA`: String?, _ `passwordB`: String?) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `signUp`(_ `name`: @escaping @autoclosure () -> String?, _ `lastName`: @escaping @autoclosure () -> String?, _ `email`: @escaping @autoclosure () -> String?, _ `passwordA`: @escaping @autoclosure () -> String?, _ `passwordB`: @escaping @autoclosure () -> String?) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String?, String?, String?, String?, String?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `setViewDelegate`(`signUpViewDelagate`: iOSSwiftPay.SignUpViewDelegate?)

  public override func `setViewDelegate`(`signUpViewDelagate`: iOSSwiftPay.SignUpViewDelegate?) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `setViewDelegate`(`signUpViewDelagate`: @escaping @autoclosure () -> iOSSwiftPay.SignUpViewDelegate?) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (iOSSwiftPay.SignUpViewDelegate?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`signUpViewDelegate`: iOSSwiftPay.SignUpViewDelegate?, `validationService`: iOSSwiftPay.ValidationService, `client`: iOSSwiftPay.ClientProtocol, `userDefaults`: iOSSwiftPay.UserDefaultsProtocol)

  public required override init(`signUpViewDelegate`: iOSSwiftPay.SignUpViewDelegate?, `validationService`: iOSSwiftPay.ValidationService, `client`: iOSSwiftPay.ClientProtocol, `userDefaults`: iOSSwiftPay.UserDefaultsProtocol) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(SignUpPresenter.self).initialize(…)`.
public func mock(_ type: iOSSwiftPay.SignUpPresenter.Type, file: StaticString = #file, line: UInt = #line) -> SignUpPresenterMock.InitializerProxy.Type {
  return SignUpPresenterMock.InitializerProxy.self
}

// MARK: - Mocked SignUpViewController

public final class SignUpViewControllerMock: iOSSwiftPay.SignUpViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> SignUpViewControllerMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`signUpPresenter`: iOSSwiftPay.SignUpPresenter, __file: StaticString = #file, __line: UInt = #line) -> SignUpViewControllerMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked `hideProgress`()

  public override func `hideProgress`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `hideProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `showProgress`()

  public override func `showProgress`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `showProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `signUpDidSucceed`()

  public override func `signUpDidSucceed`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `signUpDidSucceed`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `signUpDidFailed`(`message`: String)

  public override func `signUpDidFailed`(`message`: String) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `signUpDidFailed`(`message`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `signUpBtnTapped`(`sender`: UIButton!)

  public override func `signUpBtnTapped`(`sender`: UIButton!) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `signUpBtnTapped`(`sender`: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`signUpPresenter`: iOSSwiftPay.SignUpPresenter)

  public required override init(`signUpPresenter`: iOSSwiftPay.SignUpPresenter) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(SignUpViewController.self).initialize(…)`.
public func mock(_ type: iOSSwiftPay.SignUpViewController.Type, file: StaticString = #file, line: UInt = #line) -> SignUpViewControllerMock.InitializerProxy.Type {
  return SignUpViewControllerMock.InitializerProxy.self
}

// MARK: - Mocked SignUpViewDelegate

public final class SignUpViewDelegateMock: iOSSwiftPay.SignUpViewDelegate, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? {
    get { return self.stubbingContext.sourceLocation }
    set {
      self.stubbingContext.sourceLocation = newValue
      SignUpViewDelegateMock.staticMock.stubbingContext.sourceLocation = newValue
    }
  }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `hideProgress`()

  public func `hideProgress`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`hideProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `hideProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`hideProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `showProgress`()

  public func `showProgress`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `showProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `signUpDidSucceed`()

  public func `signUpDidSucceed`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`signUpDidSucceed`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `signUpDidSucceed`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`signUpDidSucceed`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `signUpDidFailed`(`message`: String)

  public func `signUpDidFailed`(`message`: String) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`signUpDidFailed`(`message`: String) -> Void", arguments: [Mockingbird.ArgumentMatcher(`message`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String) -> Void {
        concreteImplementation(`message`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `signUpDidFailed`(`message`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`message`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`signUpDidFailed`(`message`: String) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void>(mock: self, invocation: invocation)
  }
}

/// Returns a concrete mock of `SignUpViewDelegate`.
public func mock(_ type: iOSSwiftPay.SignUpViewDelegate.Protocol, file: StaticString = #file, line: UInt = #line) -> SignUpViewDelegateMock {
  return SignUpViewDelegateMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked TransferViewController

public final class TransferViewControllerMock: iOSSwiftPay.TransferViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> TransferViewControllerMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?, __file: StaticString = #file, __line: UInt = #line) -> TransferViewControllerMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?)

  public required override init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `moneyTransferBtnTapped`(`sender`: UIButton!)

  public override func `moneyTransferBtnTapped`(`sender`: UIButton!) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `moneyTransferBtnTapped`(`sender`: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(TransferViewController.self).initialize(…)`.
public func mock(_ type: iOSSwiftPay.TransferViewController.Type, file: StaticString = #file, line: UInt = #line) -> TransferViewControllerMock.InitializerProxy.Type {
  return TransferViewControllerMock.InitializerProxy.self
}

// MARK: - Mocked UserDefaultsProtocol

public final class UserDefaultsProtocolMock: iOSSwiftPay.UserDefaultsProtocol, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? {
    get { return self.stubbingContext.sourceLocation }
    set {
      self.stubbingContext.sourceLocation = newValue
      UserDefaultsProtocolMock.staticMock.stubbingContext.sourceLocation = newValue
    }
  }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `getStringOnUserDefaults`(_ `key`: String)

  public func `getStringOnUserDefaults`(_ `key`: String) -> String {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`getStringOnUserDefaults`(_ `key`: String) -> String", arguments: [Mockingbird.ArgumentMatcher(`key`)], returnType: Swift.ObjectIdentifier((String).self))
    return self.mockingContext.didInvoke(invocation) { () -> String in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String) -> String {
        return concreteImplementation(`key`)
      } else if let concreteImplementation = implementation as? () -> String {
        return concreteImplementation()
      } else if let defaultValue = self.stubbingContext.defaultValueProvider.provideValue(for: (String).self) {
        return defaultValue
      } else {
        fatalError(self.stubbingContext.failTest(for: invocation))
      }
    }
  }

  public func `getStringOnUserDefaults`(_ `key`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> String, String> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`key`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`getStringOnUserDefaults`(_ `key`: String) -> String", arguments: arguments, returnType: Swift.ObjectIdentifier((String).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> String, String>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `saveStringOnUserDefaults`(_ `value`: String, _ `key`: String)

  public func `saveStringOnUserDefaults`(_ `value`: String, _ `key`: String) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`saveStringOnUserDefaults`(_ `value`: String, _ `key`: String) -> Void", arguments: [Mockingbird.ArgumentMatcher(`value`), Mockingbird.ArgumentMatcher(`key`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String, String) -> Void {
        concreteImplementation(`value`, `key`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `saveStringOnUserDefaults`(_ `value`: @escaping @autoclosure () -> String, _ `key`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, String) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`value`), Mockingbird.resolve(`key`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`saveStringOnUserDefaults`(_ `value`: String, _ `key`: String) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, String) -> Void, Void>(mock: self, invocation: invocation)
  }
}

/// Returns a concrete mock of `UserDefaultsProtocol`.
public func mock(_ type: iOSSwiftPay.UserDefaultsProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> UserDefaultsProtocolMock {
  return UserDefaultsProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked UserInfoDelegate

public final class UserInfoDelegateMock: iOSSwiftPay.UserInfoDelegate, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? {
    get { return self.stubbingContext.sourceLocation }
    set {
      self.stubbingContext.sourceLocation = newValue
      UserInfoDelegateMock.staticMock.stubbingContext.sourceLocation = newValue
    }
  }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `hideBalanceLabel`()

  public func `hideBalanceLabel`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`hideBalanceLabel`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `hideBalanceLabel`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`hideBalanceLabel`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `hideProgress`()

  public func `hideProgress`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`hideProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `hideProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`hideProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `hideTryAgainMessageAndButton`()

  public func `hideTryAgainMessageAndButton`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`hideTryAgainMessageAndButton`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `hideTryAgainMessageAndButton`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`hideTryAgainMessageAndButton`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `showBalanceLabel`()

  public func `showBalanceLabel`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showBalanceLabel`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `showBalanceLabel`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showBalanceLabel`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `showProgress`()

  public func `showProgress`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `showProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showProgress`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `showTryAgainMessageAndButton`()

  public func `showTryAgainMessageAndButton`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showTryAgainMessageAndButton`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `showTryAgainMessageAndButton`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`showTryAgainMessageAndButton`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `setCurrentBalance`(_ `formattedBalance`: String, _ `color`: UIColor)

  public func `setCurrentBalance`(_ `formattedBalance`: String, _ `color`: UIColor) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`setCurrentBalance`(_ `formattedBalance`: String, _ `color`: UIColor) -> Void", arguments: [Mockingbird.ArgumentMatcher(`formattedBalance`), Mockingbird.ArgumentMatcher(`color`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String, UIColor) -> Void {
        concreteImplementation(`formattedBalance`, `color`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `setCurrentBalance`(_ `formattedBalance`: @escaping @autoclosure () -> String, _ `color`: @escaping @autoclosure () -> UIColor) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, UIColor) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`formattedBalance`), Mockingbird.resolve(`color`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`setCurrentBalance`(_ `formattedBalance`: String, _ `color`: UIColor) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, UIColor) -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `setUserName`(_ `userName`: String)

  public func `setUserName`(_ `userName`: String) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`setUserName`(_ `userName`: String) -> Void", arguments: [Mockingbird.ArgumentMatcher(`userName`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String) -> Void {
        concreteImplementation(`userName`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `setUserName`(_ `userName`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`userName`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`setUserName`(_ `userName`: String) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `setTransactionsTable`(_ `moneyTransactions`: [iOSSwiftPay.MoneyTransaction])

  public func `setTransactionsTable`(_ `moneyTransactions`: [iOSSwiftPay.MoneyTransaction]) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`setTransactionsTable`(_ `moneyTransactions`: [iOSSwiftPay.MoneyTransaction]) -> Void", arguments: [Mockingbird.ArgumentMatcher(`moneyTransactions`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? ([iOSSwiftPay.MoneyTransaction]) -> Void {
        concreteImplementation(`moneyTransactions`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `setTransactionsTable`(_ `moneyTransactions`: @escaping @autoclosure () -> [iOSSwiftPay.MoneyTransaction]) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, ([iOSSwiftPay.MoneyTransaction]) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`moneyTransactions`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`setTransactionsTable`(_ `moneyTransactions`: [iOSSwiftPay.MoneyTransaction]) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, ([iOSSwiftPay.MoneyTransaction]) -> Void, Void>(mock: self, invocation: invocation)
  }
}

/// Returns a concrete mock of `UserInfoDelegate`.
public func mock(_ type: iOSSwiftPay.UserInfoDelegate.Protocol, file: StaticString = #file, line: UInt = #line) -> UserInfoDelegateMock {
  return UserInfoDelegateMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked UserInfoPresenter

public final class UserInfoPresenterMock: iOSSwiftPay.UserInfoPresenter, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`userInfoDelegate`: iOSSwiftPay.UserInfoDelegate?, `client`: iOSSwiftPay.ClientProtocol, `userDefaults`: iOSSwiftPay.UserDefaultsProtocol, __file: StaticString = #file, __line: UInt = #line) -> UserInfoPresenterMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked client

  override public var `client`: iOSSwiftPay.ClientProtocol { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getClient() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.ClientProtocol, iOSSwiftPay.ClientProtocol> { fatalError("See 'Thunk Pruning' in the README") }

  public func setClient(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.ClientProtocol) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.ClientProtocol) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked userDefaults

  override public var `userDefaults`: iOSSwiftPay.UserDefaultsProtocol { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getUserDefaults() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> iOSSwiftPay.UserDefaultsProtocol, iOSSwiftPay.UserDefaultsProtocol> { fatalError("See 'Thunk Pruning' in the README") }

  public func setUserDefaults(_ newValue: @escaping @autoclosure () -> iOSSwiftPay.UserDefaultsProtocol) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (iOSSwiftPay.UserDefaultsProtocol) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `getAndShowCurrentBalance`()

  public override func `getAndShowCurrentBalance`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `getAndShowCurrentBalance`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `getAndShowTransactions`()

  public override func `getAndShowTransactions`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `getAndShowTransactions`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `getAndShowUserName`()

  public override func `getAndShowUserName`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `getAndShowUserName`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `setViewDelegate`(`userInfoDelegate`: iOSSwiftPay.UserInfoDelegate?)

  public override func `setViewDelegate`(`userInfoDelegate`: iOSSwiftPay.UserInfoDelegate?) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `setViewDelegate`(`userInfoDelegate`: @escaping @autoclosure () -> iOSSwiftPay.UserInfoDelegate?) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (iOSSwiftPay.UserInfoDelegate?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`userInfoDelegate`: iOSSwiftPay.UserInfoDelegate?, `client`: iOSSwiftPay.ClientProtocol, `userDefaults`: iOSSwiftPay.UserDefaultsProtocol)

  public required override init(`userInfoDelegate`: iOSSwiftPay.UserInfoDelegate?, `client`: iOSSwiftPay.ClientProtocol, `userDefaults`: iOSSwiftPay.UserDefaultsProtocol) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(UserInfoPresenter.self).initialize(…)`.
public func mock(_ type: iOSSwiftPay.UserInfoPresenter.Type, file: StaticString = #file, line: UInt = #line) -> UserInfoPresenterMock.InitializerProxy.Type {
  return UserInfoPresenterMock.InitializerProxy.self
}

// MARK: - Mocked UserInfoViewController

public final class UserInfoViewControllerMock: iOSSwiftPay.UserInfoViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> UserInfoViewControllerMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`userInfoPresenter`: iOSSwiftPay.UserInfoPresenter, __file: StaticString = #file, __line: UInt = #line) -> UserInfoViewControllerMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked transactions

  override public var `transactions`: [iOSSwiftPay.MoneyTransaction] { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getTransactions() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> [iOSSwiftPay.MoneyTransaction], [iOSSwiftPay.MoneyTransaction]> { fatalError("See 'Thunk Pruning' in the README") }

  public func setTransactions(_ newValue: @escaping @autoclosure () -> [iOSSwiftPay.MoneyTransaction]) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, ([iOSSwiftPay.MoneyTransaction]) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `tableView`(_ `tableView`: UITableView, `heightForRowAt` `indexPath`: IndexPath)

  public override func `tableView`(_ `tableView`: UITableView, `heightForRowAt` `indexPath`: IndexPath) -> CGFloat { fatalError("See 'Thunk Pruning' in the README") }

  public func `tableView`(_ `tableView`: @escaping @autoclosure () -> UITableView, `heightForRowAt` `indexPath`: @escaping @autoclosure () -> IndexPath) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UITableView, IndexPath) -> CGFloat, CGFloat> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `tableView`(_ `tableView`: UITableView, `numberOfRowsInSection` `section`: Int)

  public override func `tableView`(_ `tableView`: UITableView, `numberOfRowsInSection` `section`: Int) -> Int { fatalError("See 'Thunk Pruning' in the README") }

  public func `tableView`(_ `tableView`: @escaping @autoclosure () -> UITableView, `numberOfRowsInSection` `section`: @escaping @autoclosure () -> Int) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UITableView, Int) -> Int, Int> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `tableView`(_ `tableView`: UITableView, `cellForRowAt` `indexPath`: IndexPath)

  public override func `tableView`(_ `tableView`: UITableView, `cellForRowAt` `indexPath`: IndexPath) -> UITableViewCell { fatalError("See 'Thunk Pruning' in the README") }

  public func `tableView`(_ `tableView`: @escaping @autoclosure () -> UITableView, `cellForRowAt` `indexPath`: @escaping @autoclosure () -> IndexPath) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UITableView, IndexPath) -> UITableViewCell, UITableViewCell> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `hideBalanceLabel`()

  public override func `hideBalanceLabel`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `hideBalanceLabel`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `hideProgress`()

  public override func `hideProgress`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `hideProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `hideTryAgainMessageAndButton`()

  public override func `hideTryAgainMessageAndButton`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `hideTryAgainMessageAndButton`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `showBalanceLabel`()

  public override func `showBalanceLabel`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `showBalanceLabel`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `showProgress`()

  public override func `showProgress`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `showProgress`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `showTryAgainMessageAndButton`()

  public override func `showTryAgainMessageAndButton`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `showTryAgainMessageAndButton`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `viewWillAppear`(_ `animated`: Bool)

  public override func `viewWillAppear`(_ `animated`: Bool) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewWillAppear`(_ `animated`: @escaping @autoclosure () -> Bool) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Bool) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `setCurrentBalance`(_ `formattedBalance`: String, _ `color`: UIColor)

  public override func `setCurrentBalance`(_ `formattedBalance`: String, _ `color`: UIColor) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `setCurrentBalance`(_ `formattedBalance`: @escaping @autoclosure () -> String, _ `color`: @escaping @autoclosure () -> UIColor) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, UIColor) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `setUserName`(_ `userName`: String)

  public override func `setUserName`(_ `userName`: String) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `setUserName`(_ `userName`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `showBalanceBtnTapped`(`sender`: UIButton!)

  public override func `showBalanceBtnTapped`(`sender`: UIButton!) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `showBalanceBtnTapped`(`sender`: @escaping @autoclosure () -> UIButton) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIButton) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `setTransactionsTable`(_ `moneyTransactions`: [iOSSwiftPay.MoneyTransaction])

  public override func `setTransactionsTable`(_ `moneyTransactions`: [iOSSwiftPay.MoneyTransaction]) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `setTransactionsTable`(_ `moneyTransactions`: @escaping @autoclosure () -> [iOSSwiftPay.MoneyTransaction]) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, ([iOSSwiftPay.MoneyTransaction]) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`userInfoPresenter`: iOSSwiftPay.UserInfoPresenter)

  public required override init(`userInfoPresenter`: iOSSwiftPay.UserInfoPresenter) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(UserInfoViewController.self).initialize(…)`.
public func mock(_ type: iOSSwiftPay.UserInfoViewController.Type, file: StaticString = #file, line: UInt = #line) -> UserInfoViewControllerMock.InitializerProxy.Type {
  return UserInfoViewControllerMock.InitializerProxy.self
}

// MARK: - Mocked Utilities

public final class UtilitiesMock: iOSSwiftPay.Utilities, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "iOSSwiftPay"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }
}

/// Returns a concrete mock of `Utilities`.
public func mock(_ type: iOSSwiftPay.Utilities.Type, file: StaticString = #file, line: UInt = #line) -> UtilitiesMock {
  return UtilitiesMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
